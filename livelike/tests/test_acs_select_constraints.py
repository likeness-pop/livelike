import numpy
import pandas
import pytest

from livelike.acs import puma, select_constraints
from livelike.config import (
    constraints,
    up_base_constraints_selection,
    up_expanded_constraints_selection,
)

# year = 2019
# after_begin = constraints.begin_year <= year
# before_end = constraints.end_year >= year
# constraints = constraints.loc[after_begin & before_end].copy()


# known values #
base_constraints = [
    "B01001001",
    "B08134002",
    "B08134003",
    "B08134004",
    "B08134005",
    "B08134006",
    "B08134007",
    "B08134008",
    "B08134009",
    "B08134010",
    "B08301002",
    "B08301003",
    "B08301004",
    "B08301010",
    "B08301016",
    "B08301017",
    "B08301018",
    "B08301019",
    "B08301020",
    "B08301021",
    "B09019026",
    "B09019038",
    "B11016003",
    "B11016004",
    "B11016005",
    "B11016006",
    "B11016007",
    "B11016008",
    "B11016010",
    "B11016011",
    "B11016012",
    "B11016013",
    "B11016014",
    "B11016015",
    "B11016016",
    "B14002005",
    "B14002006",
    "B14002008",
    "B14002009",
    "B14002011",
    "B14002012",
    "B14002014",
    "B14002015",
    "B14002017",
    "B14002018",
    "B14002020",
    "B14002021",
    "B14002023",
    "B14002024",
    "B14002029",
    "B14002030",
    "B14002032",
    "B14002033",
    "B14002035",
    "B14002036",
    "B14002038",
    "B14002039",
    "B14002041",
    "B14002042",
    "B14002044",
    "B14002045",
    "B14002047",
    "B14002048",
    "B14007003",
    "B14007004",
    "B14007005",
    "B14007006",
    "B14007007",
    "B14007008",
    "B14007009",
    "B14007010",
    "B14007011",
    "B14007012",
    "B14007013",
    "B14007014",
    "B14007015",
    "B14007016",
    "B14007017",
    "B14007018",
    "B23022004",
    "B23022011",
    "B23022018",
    "B23022028",
    "B23022035",
    "B23022042",
    "B23025004",
    "B23025005",
    "B23025006",
    "B23025007",
    "B24080004",
    "B24080005",
    "B24080006",
    "B24080007",
    "B24080008",
    "B24080009",
    "B24080010",
    "B24080011",
    "B24080014",
    "B24080015",
    "B24080016",
    "B24080017",
    "B24080018",
    "B24080019",
    "B24080020",
    "B24080021",
    "B25001001",
    "B25003001",
    "B25003001",
    "B25044003",
    "B25044004",
    "B25044005",
    "B25044006",
    "B25044007",
    "B25044008",
    "B25044010",
    "B25044011",
    "B25044012",
    "B25044013",
    "B25044014",
    "B25044015",
    "B27010001",
    "B27010001",
    "C24010005",
    "C24010006",
    "C24010008",
    "C24010009",
    "C24010010",
    "C24010012",
    "C24010013",
    "C24010014",
    "C24010015",
    "C24010017",
    "C24010018",
    "C24010020",
    "C24010022",
    "C24010023",
    "C24010024",
    "C24010025",
    "C24010026",
    "C24010028",
    "C24010029",
    "C24010031",
    "C24010032",
    "C24010033",
    "C24010035",
    "C24010036",
    "C24010037",
    "C24010041",
    "C24010042",
    "C24010044",
    "C24010045",
    "C24010046",
    "C24010048",
    "C24010049",
    "C24010050",
    "C24010051",
    "C24010053",
    "C24010054",
    "C24010056",
    "C24010058",
    "C24010059",
    "C24010060",
    "C24010061",
    "C24010062",
    "C24010064",
    "C24010065",
    "C24010067",
    "C24010068",
    "C24010069",
    "C24010071",
    "C24010072",
    "C24010073",
    "C24030003",
    "C24030006",
    "C24030007",
    "C24030008",
    "C24030009",
    "C24030010",
    "C24030013",
    "C24030014",
    "C24030017",
    "C24030021",
    "C24030024",
    "C24030027",
    "C24030028",
    "C24030030",
    "C24030033",
    "C24030034",
    "C24030035",
    "C24030036",
    "C24030037",
    "C24030040",
    "C24030041",
    "C24030044",
    "C24030048",
    "C24030051",
    "C24030054",
    "C24030055",
]

expanded_constraints = [
    "B01001001",
    "B01001003",
    "B01001004",
    "B01001005",
    "B01001006",
    "B01001007",
    "B01001008",
    "B01001009",
    "B01001010",
    "B01001011",
    "B01001012",
    "B01001013",
    "B01001014",
    "B01001015",
    "B01001016",
    "B01001017",
    "B01001018",
    "B01001019",
    "B01001020",
    "B01001021",
    "B01001022",
    "B01001023",
    "B01001024",
    "B01001025",
    "B01001027",
    "B01001028",
    "B01001029",
    "B01001030",
    "B01001031",
    "B01001032",
    "B01001033",
    "B01001034",
    "B01001035",
    "B01001036",
    "B01001037",
    "B01001038",
    "B01001039",
    "B01001040",
    "B01001041",
    "B01001042",
    "B01001043",
    "B01001044",
    "B01001045",
    "B01001046",
    "B01001047",
    "B01001048",
    "B01001049",
    "B02001002",
    "B02001003",
    "B02001004",
    "B02001005",
    "B02001006",
    "B02001007",
    "B02001008",
    "B03003002",
    "B03003003",
    "B08134002",
    "B08134003",
    "B08134004",
    "B08134005",
    "B08134006",
    "B08134007",
    "B08134008",
    "B08134009",
    "B08134010",
    "B08301002",
    "B08301003",
    "B08301004",
    "B08301010",
    "B08301016",
    "B08301017",
    "B08301018",
    "B08301019",
    "B08301020",
    "B08301021",
    "B09019026",
    "B09019038",
    "B11001003",
    "B11001005",
    "B11001006",
    "B11001008",
    "B11001009",
    "B11016003",
    "B11016004",
    "B11016005",
    "B11016006",
    "B11016007",
    "B11016008",
    "B11016010",
    "B11016011",
    "B11016012",
    "B11016013",
    "B11016014",
    "B11016015",
    "B11016016",
    "B14002005",
    "B14002006",
    "B14002008",
    "B14002009",
    "B14002011",
    "B14002012",
    "B14002014",
    "B14002015",
    "B14002017",
    "B14002018",
    "B14002020",
    "B14002021",
    "B14002023",
    "B14002024",
    "B14002029",
    "B14002030",
    "B14002032",
    "B14002033",
    "B14002035",
    "B14002036",
    "B14002038",
    "B14002039",
    "B14002041",
    "B14002042",
    "B14002044",
    "B14002045",
    "B14002047",
    "B14002048",
    "B14007003",
    "B14007004",
    "B14007005",
    "B14007006",
    "B14007007",
    "B14007008",
    "B14007009",
    "B14007010",
    "B14007011",
    "B14007012",
    "B14007013",
    "B14007014",
    "B14007015",
    "B14007016",
    "B14007017",
    "B14007018",
    "B19001002",
    "B19001003",
    "B19001004",
    "B19001005",
    "B19001006",
    "B19001007",
    "B19001008",
    "B19001009",
    "B19001010",
    "B19001011",
    "B19001012",
    "B19001013",
    "B19001014",
    "B19001015",
    "B19001016",
    "B19001017",
    "B23022004",
    "B23022011",
    "B23022018",
    "B23022028",
    "B23022035",
    "B23022042",
    "B23025004",
    "B23025005",
    "B23025006",
    "B23025007",
    "B24080004",
    "B24080005",
    "B24080006",
    "B24080007",
    "B24080008",
    "B24080009",
    "B24080010",
    "B24080011",
    "B24080014",
    "B24080015",
    "B24080016",
    "B24080017",
    "B24080018",
    "B24080019",
    "B24080020",
    "B24080021",
    "B25001001",
    "B25003001",
    "B25003001",
    "B25024002",
    "B25024003",
    "B25024004",
    "B25024005",
    "B25024006",
    "B25024007",
    "B25024008",
    "B25024009",
    "B25024010",
    "B25024011",
    "B25034002",
    "B25034002",
    "B25034002",
    "B25034003",
    "B25034003",
    "B25034003",
    "B25034004",
    "B25034004",
    "B25034004",
    "B25034005",
    "B25034005",
    "B25034005",
    "B25034006",
    "B25034006",
    "B25034006",
    "B25034007",
    "B25034007",
    "B25034007",
    "B25034008",
    "B25034008",
    "B25034008",
    "B25034009",
    "B25034009",
    "B25034009",
    "B25034010",
    "B25034010",
    "B25034010",
    "B25034011",
    "B25034011",
    "B25044003",
    "B25044004",
    "B25044005",
    "B25044006",
    "B25044007",
    "B25044008",
    "B25044010",
    "B25044011",
    "B25044012",
    "B25044013",
    "B25044014",
    "B25044015",
    "B27010001",
    "B27010001",
    "C17002002",
    "C17002003",
    "C17002004",
    "C17002005",
    "C17002006",
    "C17002007",
    "C17002008",
    "C24010005",
    "C24010006",
    "C24010008",
    "C24010009",
    "C24010010",
    "C24010012",
    "C24010013",
    "C24010014",
    "C24010015",
    "C24010017",
    "C24010018",
    "C24010020",
    "C24010022",
    "C24010023",
    "C24010024",
    "C24010025",
    "C24010026",
    "C24010028",
    "C24010029",
    "C24010031",
    "C24010032",
    "C24010033",
    "C24010035",
    "C24010036",
    "C24010037",
    "C24010041",
    "C24010042",
    "C24010044",
    "C24010045",
    "C24010046",
    "C24010048",
    "C24010049",
    "C24010050",
    "C24010051",
    "C24010053",
    "C24010054",
    "C24010056",
    "C24010058",
    "C24010059",
    "C24010060",
    "C24010061",
    "C24010062",
    "C24010064",
    "C24010065",
    "C24010067",
    "C24010068",
    "C24010069",
    "C24010071",
    "C24010072",
    "C24010073",
    "C24030003",
    "C24030006",
    "C24030007",
    "C24030008",
    "C24030009",
    "C24030010",
    "C24030013",
    "C24030014",
    "C24030017",
    "C24030021",
    "C24030024",
    "C24030027",
    "C24030028",
    "C24030030",
    "C24030033",
    "C24030034",
    "C24030035",
    "C24030036",
    "C24030037",
    "C24030040",
    "C24030041",
    "C24030044",
    "C24030048",
    "C24030051",
    "C24030054",
    "C24030055",
]

# constraint counts by `geo_base_level`
# 0: bg, 1: trt
bg_geo_level_counts = [298]
trt_geo_level_counts = [298, 6]

# Tests #


def test_select_base_constraints():
    base_selection = select_constraints(
        constraints,
        up_base_constraints_selection,
    )
    observed = base_selection["code"].sort_values().tolist()
    known = base_constraints
    numpy.testing.assert_array_equal(observed, known)


def test_select_expanded_constraints():
    expanded_selection = select_constraints(
        constraints,
        up_expanded_constraints_selection,
    )
    observed = expanded_selection["code"].sort_values().tolist()
    known = expanded_constraints
    numpy.testing.assert_array_equal(observed, known)


@pytest.skip_if_no_censusapikey
def test_geo_base_level_selection_bg():
    px = puma(
        "4701603",
        year=2019,
        constraints_selection=up_expanded_constraints_selection,
        target_zone="bg",
        censusapikey=pytest.CENSUSAPIKEY,
    )
    observed = px.constraints["geo_base_level"].value_counts().tolist()
    known = bg_geo_level_counts
    numpy.testing.assert_array_equal(observed, known)


@pytest.skip_if_no_censusapikey
def test_geo_base_level_selection_trt():
    up_expanded_constraints_selection_trt = up_expanded_constraints_selection.copy()
    up_expanded_constraints_selection_trt["social"].append("language")
    up_expanded_constraints_selection_trt["social"].append("foreign_born")

    px = puma(
        "4701603",
        year=2019,
        constraints_selection=up_expanded_constraints_selection_trt,
        target_zone="trt",
        censusapikey=pytest.CENSUSAPIKEY,
    )
    observed = px.constraints["geo_base_level"].value_counts().tolist()
    known = trt_geo_level_counts
    numpy.testing.assert_array_equal(observed, known)


def test_invalid_selection():
    with pytest.raises(
        TypeError,
        match="Values of 'one' must be ``bool`` or ``list`` type.",
    ):
        select_constraints(pandas.DataFrame(), {"one": "two"})


def test_fips_not_str():
    with pytest.raises(
        TypeError, match="``fips`` argument must be str. Passed in: int"
    ):
        puma(777)


def test_fips_not_7_char():
    with pytest.raises(
        ValueError, match="``fips`` argument must be 7 characters. Length: 3"
    ):
        puma("777")


def test_bad_constraint_selection():
    constraints_selection = {
        "universe": True,
        "worker": True,
        "student": True,
        "mobility": False,
        "demographic": ["hhtype_hhsize"],
    }
    with pytest.raises(
        ValueError,
        match=(
            "The 'mobility' constraint selection was passed in as 'False', "
            "but must be passed in as either 'True' or a list."
        ),
    ):
        puma("4700800", constraints_selection=constraints_selection)


def test_invalid_replicates():
    # bad ``nreps`` -- 0
    with pytest.raises(ValueError, match="Replicate number must be between 1 - 80."):
        puma(pytest.data_0100100["puma_fips"], replicate=-1)

    # bad ``nreps`` -- 81
    with pytest.raises(ValueError, match="Replicate number must be between 1 - 80."):
        puma(pytest.data_0100100["puma_fips"], replicate=81)
